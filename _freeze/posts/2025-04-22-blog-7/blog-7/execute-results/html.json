{
  "hash": "f74860708f3382f51dc50fe7e9372bed",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Blog 7: Interactive Analysis\"\ndescription: |\n  Description of datasets found.\nauthor: \"TEAMATE\"\ndate: \"2025-04-22\"\ndraft: FALSE\n---\n\n\n\nKey objectives:\n\n- **High-level overview:** Understand the names of the fake resumes and their callback rates. \n- **Interactive deep dive:** Allow users to explore naming patterns and callback rates by race and gender.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clear workspace\nrm(list = ls())\n```\n:::\n\n\n\n### Interactive Dashboard\nBelow is a self-contained Shiny app chunk that will render directly in your Quarto site using **shinylive**.  \n\n**Instructions:**  \n- ðŸ”¹ *Self-contained:* All libraries and data loading happen within this chunk.  \n- ðŸ”¹ *Small data:* The RDS file is hosted on GitHub Pages for fast loading.  \n\n\n\n\n::: {.cell standalone='true' viewerHeight='640'}\n\n```{.r .cell-code}\n# ```{shinylive-r} when ready to publish\nlibrary(shiny)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'shiny' was built under R version 4.3.3\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(wordcloud2)\nlibrary(stringdist)\n\noptions(\"readr.edition\" = 1) # keep this to ensure you can download the data\ndata <- read_rds(\"https://sussmanbu.github.io/ma4615-sp25-final-project-teamate/dataset_for_shiny/cleaned_data.rds\")\n\n\n# Define UI for app\nui <- fluidPage(\n  titlePanel(\"Interactive Name Analysis Dashboard\"),\n  sidebarLayout(\n    sidebarPanel(\n      h4(\"Word Cloud Settings\"),\n      selectInput(\"race_wc\", \"Select Race:\", choices = sort(unique(data$race)), selected = \"White\"),\n      selectInput(\"gender_wc\", \"Select Gender:\", choices = sort(unique(data$gender)), selected = unique(data$gender)[1])\n    ),\n    mainPanel(\n      wordcloud2Output(\"name_wc\", width = \"100%\", height = \"600px\"),\n      br(),\n      h4(\"Top Names by Callback Rate\"),\n      tableOutput(\"top_callbacks\")\n    )\n  )\n)\n\n# Define server logic required to draw --\nserver <- function(input, output, session) {\n  filtered_wc <- reactive({\n    req(input$race_wc, input$gender_wc)\n    data %>% filter(race == input$race_wc, gender == input$gender_wc)\n  })\n\n  \n  output$name_wc <- renderWordcloud2({\n    df <- filtered_wc() %>%\n      count(firstname) %>%\n      arrange(desc(n)) %>%\n      head(100)\n    wordcloud2(df, size = 1)\n  })\n\n\n  output$top_callbacks <- renderTable({\n    df <- filtered_wc() %>%\n      group_by(firstname) %>%\n      summarise(\n        callback_rate = mean(cb, na.rm = TRUE),\n        count = n()\n      ) %>%\n      arrange(desc(callback_rate), desc(count)) %>%\n      head(10)\n    df\n  }, rownames = FALSE)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n`<div style=\"width: 100% ; height: 400px ; text-align: center; box-sizing: border-box; -moz-box-sizing: border-box; -webkit-box-sizing: border-box;\" class=\"muted well\">Shiny applications not supported in static R Markdown documents</div>`{=html}\n:::\n:::\n\n\n\n**Deployment tips:**  \n1. Confirm this chunk runs locally as a standard R chunk.  \n2. Place the RDS file in your `scripts/` folder and push to GitHub.  \n3. Update the `read_rds()` URL to point to your published `scripts/` location.  \n4. Change the chunk engine to `shinylive-r` and re-render the site.  \n5. Adjust `viewerHeight` as needed to fit your page layout.  \n\nThis interactive component complements the static analysis by letting readers examine names and callback patterns directly by subgroup.  \n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}