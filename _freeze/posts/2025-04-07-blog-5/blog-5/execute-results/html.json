{
  "hash": "8129283428900900f898edf0d6865291",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Blog 5: Geographic Analysis of Experiment and Census Data\"\ndescription:  |\n  Description of datasets found.\nauthor: \"TEAMATE\"\ndate: \"2025-04-07\"\ndraft: FALSE\n---\n\n\n\nThis code continues the same procedure as the previous blog, focusing on the analysis of a combined state-by-year dataset. \n\nNote: Experiment data is from 2019-2021, while census data is from 2019-2024. The following code aggregate application level data to the **state** level and merge it with the census data to calculate the proportion of applications by state.\n\nThis exercise will help us understand the background of the data on a state-by-state basis and explore the relationship between callback rates and other variables at the state level.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n# hide warnings\noptions(warn = -1)\nsuppressPackageStartupMessages(library(ggplot2))\nsuppressPackageStartupMessages(library(tidyverse))\nsuppressPackageStartupMessages(library(dplyr))\nsuppressPackageStartupMessages(library(stargazer))\nsuppressPackageStartupMessages(library(readxl))\nsuppressPackageStartupMessages(library(fixest))\nsuppressPackageStartupMessages(library(usmap))\n\n\ndata <- readRDS(\"dataset/cleaned_data.rds\")\ncensus_data <- read_excel('dataset/NST-EST2024-POP.xlsx')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\n• `` -> `...2`\n• `` -> `...3`\n• `` -> `...4`\n• `` -> `...5`\n• `` -> `...6`\n• `` -> `...7`\n```\n\n\n:::\n\n```{.r .cell-code}\ncensus_data_2 <- read_excel('dataset/nst-est2019-01.xlsx', skip = 3)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nNew names:\n• `` -> `...1`\n```\n\n\n:::\n\n```{.r .cell-code}\n# for census_data_2 only keep year column 13 and row 6 onwards\ncensus_data_2 <- census_data_2 %>%\n  select(1, 13) %>%\n  slice(6:56) \n\n# rename first column to states \ncolnames(census_data_2)[1] <- \"states\"\n\n# delete . in front of state names\ncensus_data_2 <- census_data_2 %>% \n  filter(grepl(\"^\\\\.\", states)) %>%\n  mutate(states = gsub(\"^\\\\.\", \"\", states))\n```\n:::\n\n\n\n## Data Background and Context\n\nThe dataset originates from the landmark study *\"Systemic Discrimination Among Large U.S. Employers\"* (Kline, Rose, and Walters, 2022).\n\n-   **Research Questions:** The study explores whether discrimination is endemic to particular firms, investigates firm-level heterogeneity in callback rates, and considers the potential impact of industry, geographic location, and other structural factors.\n\nThe census data was retrieved from the United States Census Bureau at this link: https://www.census.gov/data/tables/time-series/demo/popest/2020s-state-total.html\n\n# Aggregating Application Data to State Level\nTo begin our analysis, we aggregate individual-level application data into state-level summaries. In this section, we create new variables such as the full name (and its length) and calculate the proportion of applicants with black-sounding names. These measures help us capture nuances in the data that might be related to potential discriminatory practices.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata$full_name <- paste(data$firstname, data$lastname)\ndata$name_length <- nchar(data$full_name)\nstate_data <- data %>%\n  group_by(state, year) %>%\n  summarise(\n    num_sub = n(),\n    callback_rate = mean(cb),\n    age = mean(age_at_sub),\n    name_length = mean(name_length),\n    proportion_black_name = sum(black == 1) / num_sub\n  ) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'state'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nunique(state_data$state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"AK\" \"AL\" \"AR\" \"AZ\" \"CA\" \"CO\" \"CT\" \"DC\" \"DE\" \"FL\" \"GA\" \"HI\" \"IA\" \"ID\" \"IL\"\n[16] \"IN\" \"KS\" \"KY\" \"LA\" \"MA\" \"MD\" \"ME\" \"MI\" \"MN\" \"MO\" \"MS\" \"MT\" \"NC\" \"ND\" \"NE\"\n[31] \"NH\" \"NJ\" \"NM\" \"NV\" \"NY\" \"OH\" \"OK\" \"OR\" \"PA\" \"RI\" \"SC\" \"SD\" \"TN\" \"TX\" \"UT\"\n[46] \"VA\" \"VT\" \"WA\" \"WI\" \"WV\" \"WY\"\n```\n\n\n:::\n:::\n\n\n\n# Cleaning and Reshaping Census Data - continued\n\nThe next step involves cleaning the census data. This dataset provides annual state population counts, which we reshape into a longitudinal (panel) format to facilitate merging with the state-level application data. The cleaning process includes renaming columns, removing extraneous rows, and filtering to include only the relevant states.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(census_data)[1] <- \"states\"\n\ncensus_data <- census_data %>% \n  select(-2) %>% \n  slice(-(1:3))\n\ncolnames(census_data)[2:6] <- c(\"2020\", \"2021\", \"2022\", \"2023\", \"2024\")\n\ncensus_data <- census_data %>% filter(grepl(\"^\\\\.\", states))\n\ncensus_data <- census_data %>% \n  filter(states != \".Puerto Rico\") %>%\n  mutate(states = gsub(\"^\\\\.\", \"\", states)) \n\n# add census_data_2 to census_data \ncensus_data <- census_data %>%\n  left_join(census_data_2, by = \"states\") \n```\n:::\n\n\n\n# Clean Population Data to Longitudinal Format\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a state abbr column for merging\ncensus_data$state_abbr <- toupper(substr(census_data$states, 1, 2))\n\n# reshape the data into state-year panel\ncensus_data_long <- census_data %>%\n  pivot_longer(\n    cols = -c(states, state_abbr),\n    names_to = \"year\",\n    values_to = \"population\",\n    values_transform = list(population = as.numeric)\n  ) %>%\n  mutate(year = as.numeric(year))\n\n# check unique state_abbr\nunique(census_data$states)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Alabama\"              \"Alaska\"               \"Arizona\"             \n [4] \"Arkansas\"             \"California\"           \"Colorado\"            \n [7] \"Connecticut\"          \"Delaware\"             \"District of Columbia\"\n[10] \"Florida\"              \"Georgia\"              \"Hawaii\"              \n[13] \"Idaho\"                \"Illinois\"             \"Indiana\"             \n[16] \"Iowa\"                 \"Kansas\"               \"Kentucky\"            \n[19] \"Louisiana\"            \"Maine\"                \"Maryland\"            \n[22] \"Massachusetts\"        \"Michigan\"             \"Minnesota\"           \n[25] \"Mississippi\"          \"Missouri\"             \"Montana\"             \n[28] \"Nebraska\"             \"Nevada\"               \"New Hampshire\"       \n[31] \"New Jersey\"           \"New Mexico\"           \"New York\"            \n[34] \"North Carolina\"       \"North Dakota\"         \"Ohio\"                \n[37] \"Oklahoma\"             \"Oregon\"               \"Pennsylvania\"        \n[40] \"Rhode Island\"         \"South Carolina\"       \"South Dakota\"        \n[43] \"Tennessee\"            \"Texas\"                \"Utah\"                \n[46] \"Vermont\"              \"Virginia\"             \"Washington\"          \n[49] \"West Virginia\"        \"Wisconsin\"            \"Wyoming\"             \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(state_data$year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2020 2021 2019\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(census_data_long$year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2020 2021 2022 2023 2024 2019\n```\n\n\n:::\n:::\n\n\nWe further process the census data to create a state-year panel, including the state abbreviations necessary for merging with the experimental data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate_mapping <- tibble::tribble(\n  ~states,                     ~state_abbr_exp,\n  \"Alabama\",                   \"AL\",\n  \"Alaska\",                    \"AK\",\n  \"Arizona\",                   \"AZ\",\n  \"Arkansas\",                  \"AR\",\n  \"California\",                \"CA\",\n  \"Colorado\",                  \"CO\",\n  \"Connecticut\",               \"CT\",\n  \"Delaware\",                  \"DE\",\n  \"District of Columbia\",      \"DC\",\n  \"Florida\",                   \"FL\",\n  \"Georgia\",                   \"GA\",\n  \"Hawaii\",                    \"HI\",\n  \"Idaho\",                     \"ID\",\n  \"Illinois\",                  \"IL\",\n  \"Indiana\",                   \"IN\",\n  \"Iowa\",                      \"IA\",\n  \"Kansas\",                    \"KS\",\n  \"Kentucky\",                  \"KY\",\n  \"Louisiana\",                 \"LA\",\n  \"Maine\",                     \"ME\",\n  \"Maryland\",                  \"MD\",\n  \"Massachusetts\",             \"MA\",\n  \"Michigan\",                  \"MI\",\n  \"Minnesota\",                 \"MN\",\n  \"Mississippi\",               \"MS\",\n  \"Missouri\",                  \"MO\",\n  \"Montana\",                   \"MT\",\n  \"Nebraska\",                  \"NE\",\n  \"Nevada\",                    \"NV\",\n  \"New Hampshire\",             \"NH\",\n  \"New Jersey\",                \"NJ\",\n  \"New Mexico\",                \"NM\",\n  \"New York\",                  \"NY\",\n  \"North Carolina\",            \"NC\",\n  \"North Dakota\",              \"ND\",\n  \"Ohio\",                      \"OH\",\n  \"Oklahoma\",                  \"OK\",\n  \"Oregon\",                    \"OR\",\n  \"Pennsylvania\",              \"PA\",\n  \"Rhode Island\",              \"RI\",\n  \"South Carolina\",            \"SC\",\n  \"South Dakota\",              \"SD\",\n  \"Tennessee\",                 \"TN\",\n  \"Texas\",                     \"TX\",\n  \"Utah\",                      \"UT\",\n  \"Vermont\",                   \"VT\",\n  \"Virginia\",                  \"VA\",\n  \"Washington\",                \"WA\",\n  \"West Virginia\",             \"WV\",\n  \"Wisconsin\",                 \"WI\",\n  \"Wyoming\",                   \"WY\"\n)\n\ncensus_data_long <- census_data_long %>%\n  left_join(state_mapping, by = \"states\")\n\nmerged_data <- state_data %>%\n  left_join(\n    census_data_long %>% select(state_abbr_exp, year, population),\n    by = c(\"state\" = \"state_abbr_exp\", \"year\" = \"year\")\n  )\n\n# cross sectional data for all years all states\ncross_sectional <- merged_data %>%\n  group_by(state) %>%\n  summarise(\n    num_sub = sum(num_sub),\n    callback_rate = mean(callback_rate),\n    age = mean(age),\n    name_length = mean(name_length),\n    proportion_black_name = sum(proportion_black_name * num_sub) / num_sub,\n    population = mean(population),\n    proportion_of_applicants = num_sub / population\n  ) %>%\n  ungroup()\n\n\nplot_usmap(data = cross_sectional, values = \"population\") +\n  scale_fill_continuous(low = \"white\", high = \"skyblue\", \n                        name = \"Population Size\", \n                        label = scales::comma) +\n  labs(title = \"Mean Population Size of Each State 2019-2021\") +\n  theme(legend.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](blog-5_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_usmap(data = cross_sectional, values = \"num_sub\") +\n  scale_fill_continuous(low = \"white\", high = \"skyblue\", \n                        name = \"Total Number of Applicantions\", \n                        label = scales::comma) +\n  labs(title = \"Total Number of Applicantions Within State 2019-2021\") +\n  theme(legend.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](blog-5_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nHere we can see that the relative number of applications across states actually reflect the size of the population in each state. \n\nOur analysis indicates that the number of applications in each state largely reflects its population size. In particular, states in the West, Northeast, and Southeast—regions known for having larger populations—consistently show higher application counts, aligning with the overall demographic distribution across the United States.\n\n\n",
    "supporting": [
      "blog-5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}