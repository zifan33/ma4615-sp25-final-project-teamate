---
title: "Blog 4: Extended Statistical Modeling"
description:  |
  Apply some statistical modeling to our data.
author: "TEAMATE"
date: "2025-03-31"
draft: FALSE
---

Note: Experiment data is from 2019-2021, while census data is from 2019-2024. The following code aggregate application level data to the **state** level and merge it with the census data to calculate the proportion of applications by state.

This exercise will help us understand the background of the data on a state-by-state basis and explore the relationship between callback rates and other variables at the state level.

```{r}
rm(list = ls())
# hide warnings
options(warn = -1)
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(stargazer))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(fixest))

data <- readRDS("dataset/cleaned_data.rds")
census_data <- read_excel('dataset/NST-EST2024-POP.xlsx')
census_data_2 <- read_excel('dataset/nst-est2019-01.xlsx', skip = 3)

# for census_data_2 only keep year column 13 and row 6 onwards
census_data_2 <- census_data_2 %>%
  select(1, 13) %>%
  slice(6:56) 

# rename first column to states 
colnames(census_data_2)[1] <- "states"

# delete . in front of state names
census_data_2 <- census_data_2 %>% 
  filter(grepl("^\\.", states)) %>%
  mutate(states = gsub("^\\.", "", states))
```

## Data Background and Context

The dataset originates from the landmark study *"Systemic Discrimination Among Large U.S. Employers"* (Kline, Rose, and Walters, 2022).

-   **Research Questions:** The study explores whether discrimination is endemic to particular firms, investigates firm-level heterogeneity in callback rates, and considers the potential impact of industry, geographic location, and other structural factors.

The census data was retrieved from the United States Census Bureau at this link: https://www.census.gov/data/tables/time-series/demo/popest/2020s-state-total.html

# Aggregating Application Data to State Level
To begin our analysis, we aggregate individual-level application data into state-level summaries. In this section, we create new variables such as the full name (and its length) and calculate the proportion of applicants with black-sounding names. These measures help us capture nuances in the data that might be related to potential discriminatory practices.

```{r}
data$full_name <- paste(data$firstname, data$lastname)
data$name_length <- nchar(data$full_name)
state_data <- data %>%
  group_by(state, year) %>%
  summarise(
    num_sub = n(),
    callback_rate = mean(cb),
    age = mean(age_at_sub),
    name_length = mean(name_length),
    proportion_black_name = sum(black == 1) / num_sub
  ) %>%
  ungroup()
unique(state_data$state)
```

# Cleaning and Reshaping Census Data - continued

The next step involves cleaning the census data. This dataset provides annual state population counts, which we reshape into a longitudinal (panel) format to facilitate merging with the state-level application data. The cleaning process includes renaming columns, removing extraneous rows, and filtering to include only the relevant states.

```{r}
colnames(census_data)[1] <- "states"

census_data <- census_data %>% 
  select(-2) %>% 
  slice(-(1:3))

colnames(census_data)[2:6] <- c("2020", "2021", "2022", "2023", "2024")

census_data <- census_data %>% filter(grepl("^\\.", states))

census_data <- census_data %>% 
  filter(states != ".Puerto Rico") %>%
  mutate(states = gsub("^\\.", "", states)) 

# add census_data_2 to census_data 
census_data <- census_data %>%
  left_join(census_data_2, by = "states") 
```

# Clean Population Data to Longitudinal Format

```{r}
# create a state abbr column for merging
census_data$state_abbr <- toupper(substr(census_data$states, 1, 2))

# reshape the data into state-year panel
census_data_long <- census_data %>%
  pivot_longer(
    cols = -c(states, state_abbr),
    names_to = "year",
    values_to = "population",
    values_transform = list(population = as.numeric)
  ) %>%
  mutate(year = as.numeric(year))

# check unique state_abbr
unique(census_data$states)


```

```{r}
unique(state_data$year)
```

```{r}
unique(census_data_long$year)
```
We further process the census data to create a state-year panel, including the state abbreviations necessary for merging with the experimental data.
```{r}
state_mapping <- tibble::tribble(
  ~states,                     ~state_abbr_exp,
  "Alabama",                   "AL",
  "Alaska",                    "AK",
  "Arizona",                   "AZ",
  "Arkansas",                  "AR",
  "California",                "CA",
  "Colorado",                  "CO",
  "Connecticut",               "CT",
  "Delaware",                  "DE",
  "District of Columbia",      "DC",
  "Florida",                   "FL",
  "Georgia",                   "GA",
  "Hawaii",                    "HI",
  "Idaho",                     "ID",
  "Illinois",                  "IL",
  "Indiana",                   "IN",
  "Iowa",                      "IA",
  "Kansas",                    "KS",
  "Kentucky",                  "KY",
  "Louisiana",                 "LA",
  "Maine",                     "ME",
  "Maryland",                  "MD",
  "Massachusetts",             "MA",
  "Michigan",                  "MI",
  "Minnesota",                 "MN",
  "Mississippi",               "MS",
  "Missouri",                  "MO",
  "Montana",                   "MT",
  "Nebraska",                  "NE",
  "Nevada",                    "NV",
  "New Hampshire",             "NH",
  "New Jersey",                "NJ",
  "New Mexico",                "NM",
  "New York",                  "NY",
  "North Carolina",            "NC",
  "North Dakota",              "ND",
  "Ohio",                      "OH",
  "Oklahoma",                  "OK",
  "Oregon",                    "OR",
  "Pennsylvania",              "PA",
  "Rhode Island",              "RI",
  "South Carolina",            "SC",
  "South Dakota",              "SD",
  "Tennessee",                 "TN",
  "Texas",                     "TX",
  "Utah",                      "UT",
  "Vermont",                   "VT",
  "Virginia",                  "VA",
  "Washington",                "WA",
  "West Virginia",             "WV",
  "Wisconsin",                 "WI",
  "Wyoming",                   "WY"
)

census_data_long <- census_data_long %>%
  left_join(state_mapping, by = "states")

merged_data <- state_data %>%
  left_join(
    census_data_long %>% select(state_abbr_exp, year, population),
    by = c("state" = "state_abbr_exp", "year" = "year")
  )

# define total_num_sub 
merged_data <- merged_data %>%
  group_by(year,state) %>%
  mutate(total_num_sub = sum(num_sub)) %>%
  ungroup()

# define the proportion_of_applicants column
merged_data <- merged_data %>%
  mutate(proportion_of_applicants = total_num_sub / population)

#plot proportion of applications by state (facet by year)
# merged_data %>%
# ggplot(aes(x = reorder(state, proportion_of_applicants), y = proportion_of_applicants)) +
# geom_bar(stat = "identity", fill = "skyblue", color = "black") +
# coord_flip() +
# facet_wrap(~year, scales = "free") +
# labs(
# title = "Proportion of Applications/Population Size by State",
# y = "Proportion of Applicants",
# x = "State"
# )
```

# Plot callback rate by state (facet by year)

```{r}
national_summary <- merged_data %>%
  group_by(year) %>%
  summarise(
    mean_callback = mean(callback_rate, na.rm = TRUE),
  )

ggplot(merged_data, aes(x = reorder(state, callback_rate, FUN = median), y = callback_rate)) +
  geom_violin(fill = "skyblue", color = "black", na.rm = TRUE) +
  geom_jitter(width = 0.2, size = 1, alpha = 0.6) +
  geom_hline(data = national_summary, aes(yintercept = mean_callback), color = "darkred", linetype = "dashed") +
  coord_flip() +
  facet_wrap(~year, scales = "free", drop = FALSE) +
  labs(
    title = "Callback Rate by State with Annual National Mean",
    y = "Callback Rate",
    x = "State"
  )
```



# Statistical Modeling (Linear): Relating Age to Callback Success

In the first model, we transform the callback rate into a count of successes by multiplying it with the number of submissions.
```{r}
merged_data <- merged_data %>%
  mutate(success = callback_rate * num_sub)
mod_1 <-lm(success ~ age, data = merged_data)
stargazer(mod_1, type = "text", digits = 3)
```
While the linear model is a simplification, it serves as a starting point for our further investigation using fixed effects.

### Findings:

-   Positive coefficient (β = 15.967, p = 0.093)
-   Suggests 1-year age increase → \~16 more callbacks
-   Marginally significant relationship (p \< 0.1)


# Visualizing the Relationship between Callback Rate and Age (Logit)

To complement our regression analysis, we visualize the relationship between age and callback rate using a scatter plot with a fitted smooth curve. This plot helps to highlight any nonlinearities or trends that may not be apparent from the regression output alone.

```{r}
merged_data %>%
  ggplot(aes(x = age, y = callback_rate)) +
  geom_point() +
  geom_smooth(method = "glm", 
              method.args = list(family = binomial(link = "logit")), 
              se = TRUE) +
  labs(
    title = "Relationship between Callback Rate and Age (Logit)",
    y = "Callback Rate",
    x = "Age"
  )
```



#  Fixed Effect: Effect of Age on Success within States

The first fixed effects model controls for state-specific characteristics. Here, we decompose age and success into their within-state (demeaned) components, allowing us to examine the relationship between these variables within each state.

```{r}
merged_data <- merged_data %>%
  mutate(success = callback_rate * num_sub)
  # here we convert the callback rate to the number of callbacks for the fixed effects linear model

# within-state variations
mod_2 <- feols(success ~ age | state, data = merged_data)
summary(mod_2) # positive significant effect of age on success (but this is for all age groups)
```

### **Findings:**

-   Negative coefficient (β = 14.3495, p = 	0.014188)

-   Within the same state: 1-year age increase → \~14.3 more callbacks for all age groups on average.


# Visualizing the relationship between callback rate and age under fixed effect
We then visualize this within-state relationship by plotting the demeaned variables.
```{r}
# demean age: 
mod_age <- feols(age ~ 1 | state, data = merged_data)
merged_data <- merged_data %>%
  mutate(age_demeaned = resid(mod_age))

# demean success:
mod_rate <- feols(success ~ 1 | state, data = merged_data)
merged_data <- merged_data %>%
  mutate(success_demeaned = resid(mod_rate))

ggplot(merged_data, aes(x = age_demeaned, y = success_demeaned)) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm", color = "blue") +
  labs(
    title = " Relationship between Number of Successful Application and Age (Within-State)",
    x = "Age",
    y = "Number of Successful Application"
  )
```

=======
# Between Fixed Effect: Effect of Age on Success between States

Finally, we assess the effect of age on success between states while controlling for year-specific effects. This model examines whether differences in average age across states are associated with variations in callback success at a broader level.

```{r}
mod_3 <- feols(success ~ age |year, data = merged_data)
summary(mod_3) # no significant effect of age on success 
```

# save the merged data for future use

```{r}
saveRDS(merged_data, "dataset/merged_data_state_by_year.rds")
```
